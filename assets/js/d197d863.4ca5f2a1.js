(self.webpackChunkplumier_docs=self.webpackChunkplumier_docs||[]).push([[701],{876:function(e,t,a){"use strict";a.d(t,{Zo:function(){return m},kt:function(){return d}});var r=a(2784);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),s=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),u=s(a),d=n,h=u["".concat(l,".").concat(d)]||u[d]||p[d]||o;return a?r.createElement(h,i(i({ref:t},m),{},{components:a})):r.createElement(h,i({ref:t},m))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var s=2;s<o;s++)i[s]=a[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7030:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var r=a(7560),n=a(8283),o=(a(2784),a(876)),i=["components"],c={id:"metaprogramming",title:"Metaprogramming"},l={unversionedId:"metaprogramming",id:"metaprogramming",isDocsHomePage:!1,title:"Metaprogramming",description:"Key feature that make Plumier different than other TypeScript backend framework is its ability to perform metaprogramming. Plumier has its own reflection (introspection) library named @plumier/reflect, that makes metaprogramming possible.",source:"@site/docs/MetaProgramming.md",sourceDirName:".",slug:"/metaprogramming",permalink:"/metaprogramming",editUrl:"https://github.com/plumier/plumier/edit/master/docs/docusaurus/docs/MetaProgramming.md",version:"current",frontMatter:{id:"metaprogramming",title:"Metaprogramming"},sidebar:"overview",previous:{title:"Reflection Fundamentals",permalink:"/reflection-basic"},next:{title:"Custom Parameter Binding",permalink:"/custom-parameter-binding"}},s=[{value:"Metadata",id:"metadata",children:[]},{value:"Access The Metadata",id:"access-the-metadata",children:[{value:"Middleware",id:"middleware",children:[]},{value:"Custom Authorizer",id:"custom-authorizer",children:[]},{value:"Custom Validator",id:"custom-validator",children:[]},{value:"Custom Binder",id:"custom-binder",children:[]}]},{value:"Controller and Action Object Graph",id:"controller-and-action-object-graph",children:[]},{value:"Action Params",id:"action-params",children:[]}],m={toc:s};function p(e){var t=e.components,a=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Key feature that make Plumier different than other TypeScript backend framework is its ability to perform metaprogramming. Plumier has its own reflection (introspection) library named ",(0,o.kt)("inlineCode",{parentName:"p"},"@plumier/reflect"),", that makes metaprogramming possible."),(0,o.kt)("p",null,"Metaprogramming in Plumier increases reusability of custom extension, because it can access information about current controller and action handles the request and the location of custom extension applied. "),(0,o.kt)("h2",{id:"metadata"},"Metadata"),(0,o.kt)("p",null,"Metadata is specialized class contains information about current request metadata, such as controller object graph, action object graph, action parameters etc. It has properties below"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"actionParams")," current action parameters, contains information about action parameters values used to execute the action."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"controller")," current controller object graph, contains information about controller name, decorators, methods, constructor etc. "),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"action")," current action object graph, contains information about action name, parameters, decorators etc."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"current")," metadata information where the appropriate decorator applied, can be Class metadata, Method metadata, Property metadata or Parameter metadata. For global middleware the ",(0,o.kt)("inlineCode",{parentName:"li"},"current")," property will be ",(0,o.kt)("inlineCode",{parentName:"li"},"undefined"),".")),(0,o.kt)("h2",{id:"access-the-metadata"},"Access The Metadata"),(0,o.kt)("p",null,"Metadata object accessible through all custom extension, it accessible by ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata")," property. "),(0,o.kt)("h3",{id:"middleware"},"Middleware"),(0,o.kt)("p",null,"Invocation object has ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata")," property, you can access it like below"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const myCustomMiddleware:CustomMiddlewareFunction = ({ metadata, proceed }) => {\n    // process metadata \n    return proceed()\n}\n")),(0,o.kt)("p",null,"Or accessible from class style middleware "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"class MyCustomMiddleware implements CustomMiddleware {\n    async execute({ metadata, proceed }: Invocation) {\n        // process metadata \n        return proceed()\n    }\n}\n")),(0,o.kt)("h3",{id:"custom-authorizer"},"Custom Authorizer"),(0,o.kt)("p",null,"Metadata can be accessed from ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthorizationContext")," class like below "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const myCustomAuthorizer: CustomAuthorizerFunction = ({ metadata }) => {\n    // process metadata\n    return true\n}\n")),(0,o.kt)("p",null,"Or accessible from class style authorizer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"class MyCustomAuthorizer implements CustomAuthorizer {\n    authorize({ metadata }: AuthorizationContext) {\n        // process metadata\n        return true\n    }\n}\n")),(0,o.kt)("h3",{id:"custom-validator"},"Custom Validator"),(0,o.kt)("p",null,"Metadata can be accessed from ",(0,o.kt)("inlineCode",{parentName:"p"},"ValidatorContext")," class like below "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const myCustomValidator:CustomValidatorFunction = (val, { metadata }) => {\n    // process metadata\n}\n")),(0,o.kt)("p",null,"Or accessible from class style validator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"class MyCustomValidator implements CustomValidator {\n    validate(value: any, { metadata } : ValidatorContext) {\n        // process metadata\n    }\n}\n")),(0,o.kt)("h3",{id:"custom-binder"},"Custom Binder"),(0,o.kt)("p",null,"Metadata accessible from the second parameter of custom binder "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const myCustomBinder:CustomBinderFunction = (ctx, metadata) => {\n    // process metadata\n}\n")),(0,o.kt)("h2",{id:"controller-and-action-object-graph"},"Controller and Action Object Graph"),(0,o.kt)("p",null,"Metadata object contains information of current controller and action handle the request, Access them like below "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const controllerName = metadata.controller.name \nconst actionName = metadata.action.name \n")),(0,o.kt)("p",null,"Access the parameter names of the action "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const actionParameterNames = metadata.action.parameters.map(x => x.name)\n")),(0,o.kt)("p",null,"Access decorator applied to the Controller or Action "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const controllerDecorators = metadata.controller.decorators\nconst actionDecorators = metadata.action.decorators\n")),(0,o.kt)("h2",{id:"action-params"},"Action Params"),(0,o.kt)("p",null,"Action parameter useful to get information about current action parameters and their values. For example with controller below "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'class AnimalController {\n    @route.get(":id")\n    get(id:string, breed:string){\n\n    }\n}\n')),(0,o.kt)("p",null,"With the request ",(0,o.kt)("inlineCode",{parentName:"p"},"GET /animal/12345?breed=canine")," you can access the values of the parameter from metadata object like below"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'const id = metadata.actionParams.get("id") //result id = 12345 \nconst breed = metadata.actionParams.get("breed") //result breed = canine \n')),(0,o.kt)("p",null,"You can access the parameter by its index like below "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const id = metadata.actionParams.get(0) //result id = 12345 \nconst breed = metadata.actionParams.get(1) //result breed = canine \n")),(0,o.kt)("p",null,"To increase your app robustness it is necessary to check if current action handles the request has specific parameter. You can do that like below "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'if(!metadata.actionParams.has("id"))\n    throw new Error("Applied method doesn\'t have \'id\' parameter")\n')))}p.isMDXComponent=!0}}]);