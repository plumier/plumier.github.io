(self.webpackChunkplumier_docs=self.webpackChunkplumier_docs||[]).push([[429],{876:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return c}});var i=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),m=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=m(e.components);return i.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=m(n),c=a,f=d["".concat(p,".").concat(c)]||d[c]||s[c]||l;return n?i.createElement(f,r(r({ref:t},u),{},{components:n})):i.createElement(f,r({ref:t},u))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var m=2;m<l;m++)r[m]=n[m];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3563:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return m},default:function(){return s}});var i=n(7560),a=n(8283),l=(n(2784),n(876)),r=["components"],o={id:"file-upload",title:"File Upload"},p={unversionedId:"file-upload",id:"file-upload",isDocsHomePage:!1,title:"File Upload",description:"Plumier added support for file upload using multi part form data, by default this feature is not enabled, you can enable the multipart feature from the WebApiFacility like below:",source:"@site/docs/File-Upload.md",sourceDirName:".",slug:"/file-upload",permalink:"/file-upload",editUrl:"https://github.com/plumier/plumier/edit/master/docs/docusaurus/docs/File-Upload.md",version:"current",frontMatter:{id:"file-upload",title:"File Upload"},sidebar:"overview",previous:{title:"Serve Static Files",permalink:"/serve-static"},next:{title:"Routing",permalink:"/routing"}},m=[{value:"Parameter Binding",id:"parameter-binding",children:[]},{value:"Multiple Files",id:"multiple-files",children:[]},{value:"FormFile",id:"formfile",children:[]},{value:"File Validation",id:"file-validation",children:[]},{value:"Image Validation",id:"image-validation",children:[]}],u={toc:m};function s(e){var t=e.components,n=(0,a.Z)(e,r);return(0,l.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Plumier added support for file upload using multi part form data, by default this feature is not enabled, you can enable the ",(0,l.kt)("inlineCode",{parentName:"p"},"multipart")," feature from the ",(0,l.kt)("inlineCode",{parentName:"p"},"WebApiFacility")," like below: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import Plumier, { WebApiFacility } from "plumier"\n\nconst plum = new Plumier()\nplum.set(new WebApiFacility({ bodyParser: { multipart: true }}))\n')),(0,l.kt)("h2",{id:"parameter-binding"},"Parameter Binding"),(0,l.kt)("p",null,"Plumier provided a parameter binding to automatically bound the ",(0,l.kt)("inlineCode",{parentName:"p"},"FormFile")," into action parameter. Its possible to bound it using name binding or decorator binding using ",(0,l.kt)("inlineCode",{parentName:"p"},"@bind.formFile()"),". "),(0,l.kt)("p",null,"For example you have a simple form with a file input named ",(0,l.kt)("inlineCode",{parentName:"p"},"file")," like below "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<form method="POST" enctype="multipart/form-data" action="/animal/save">\n    <input type="file" name="file"/>\n    <input type="submit" value="Upload"/>\n</form>\n')),(0,l.kt)("p",null,"Note that the action of the form pointed to ",(0,l.kt)("inlineCode",{parentName:"p"},"/animal/save"),". The name of the file input is ",(0,l.kt)("inlineCode",{parentName:"p"},"file"),". Using that information you can create the controller like below"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import { FormFile, route } from "plumier"\nimport { readFile } from "fs"\nimport { promisify } from "util"\n\nconst readFileAsync = promisify(readFile)\n\nexport class AnimalController {\n    @route.post()\n    async save(file: FormFile) {\n        // process the file \n        // crop or create thumbnail \n        // re-upload to cloud storage\n        const buf = await readFileAsync(file.path)\n    }\n}\n')),(0,l.kt)("p",null,"Controller above will be generated into route ",(0,l.kt)("inlineCode",{parentName:"p"},"POST /animal/save"),", it uses name binding to bind the file input into the action parameter. Note that the name of the action parameter ",(0,l.kt)("inlineCode",{parentName:"p"},"file")," is the same as the file input name in the html form ",(0,l.kt)("inlineCode",{parentName:"p"},"file"),". "),(0,l.kt)("p",null,"Its also possible to bind the file using decorator like below"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'export class AnimalController {\n    @route.post()\n    save(@bind.formFile("file") data: FormFile) {\n    }\n}\n')),(0,l.kt)("p",null,"Note that when using decorator parameter binding, the parameter name is not necessary to be the same as the file input. "),(0,l.kt)("h2",{id:"multiple-files"},"Multiple Files"),(0,l.kt)("p",null,"For file input with ",(0,l.kt)("inlineCode",{parentName:"p"},"multiple")," property enabled, you need to specify the type of the action parameter as array of ",(0,l.kt)("inlineCode",{parentName:"p"},"FormFile")," like below"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<form method="POST" enctype="multipart/form-data" action="/animal/save">\n    <input type="file" name="file" multiple/>\n    <input type="submit" value="Upload"/>\n</form>\n')),(0,l.kt)("p",null,"Above code showing file input has the ",(0,l.kt)("inlineCode",{parentName:"p"},"multiple")," property enabled, controller can be changed into below"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import tsp from "@plumier/reflect" \n\nexport class AnimalController {\n    @route.post()\n    save(@tsp.type([FormFile]) file: FormFile[]) {\n\n    }\n}\n')),(0,l.kt)("p",null,"Note that you need to provided type information using ",(0,l.kt)("inlineCode",{parentName:"p"},"@tsp.type([FormFile])")," to prevent route analysis warning. "),(0,l.kt)("h2",{id:"formfile"},"FormFile"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"FormFile")," is a specialized class contains information about uploaded file input. Its has properties like below: "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"size"),": Size of the file (bytes)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"path"),": Temporary path of the uploaded file"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name"),": File name provided by client"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type"),": Mime type of the file "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mtime"),": The file timestamp")),(0,l.kt)("h2",{id:"file-validation"},"File Validation"),(0,l.kt)("p",null,"Plumier provided file validation using decorator for convenient, it can be applied on the ",(0,l.kt)("inlineCode",{parentName:"p"},"FormFile")," parameter like other validator."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'export class AnimalController {\n    @route.post()\n    save(@val.file("3MB") file: FormFile) {\n    }\n}\n')),(0,l.kt)("p",null,"Above code will restrict the size of uploaded file only 3MB allowed. The ",(0,l.kt)("inlineCode",{parentName:"p"},"@val.file()")," validator receive string/number as default to limit the file size. Internally the bytes string notation uses ",(0,l.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/bytes"},"bytes")," to parse the string. "),(0,l.kt)("p",null,"File validation also receive object parameter for more options. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"export class AnimalController {\n    @route.post()\n    save(@val.file({ mime: /^image\\/(jpg|jpeg)$/i }) file: FormFile) {\n    }\n}\n")),(0,l.kt)("p",null,"Above code will restrict only file with mime type ",(0,l.kt)("inlineCode",{parentName:"p"},"image/jpg")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"image/jpeg")," allowed. "),(0,l.kt)("h2",{id:"image-validation"},"Image Validation"),(0,l.kt)("p",null,"Plumier provided a short hand for image validation, to restrict the uploaded file only with mime type ",(0,l.kt)("inlineCode",{parentName:"p"},"image/*"),". "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'export class AnimalController {\n    @route.post()\n    save(@val.image("3MB") file: FormFile) {\n    }\n}\n')),(0,l.kt)("p",null,"Above code will restrict uploaded file only of type image with maximum file size 3MB."))}s.isMDXComponent=!0}}]);