(self.webpackChunkplumier_docs=self.webpackChunkplumier_docs||[]).push([[676],{876:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,y=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(y,s(s({ref:t},p),{},{components:n})):r.createElement(y,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7459:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return i},toc:function(){return l},default:function(){return p}});var r=n(7560),o=n(8283),a=(n(2784),n(876)),s={id:"testing-tips",title:"Testing Tips"},i={unversionedId:"refs/testing-tips",id:"refs/testing-tips",isDocsHomePage:!1,title:"Testing Tips",description:"To make testing easy, some tips below will make your testing easier",source:"@site/docs/refs/Testing-Tips.md",sourceDirName:"refs",slug:"/refs/testing-tips",permalink:"/refs/testing-tips",editUrl:"https://github.com/plumier/plumier/edit/master/docs/docusaurus/docs/refs/Testing-Tips.md",version:"current",frontMatter:{id:"testing-tips",title:"Testing Tips"}},l=[{value:"Pick what you need to minimize mock",id:"pick-what-you-need-to-minimize-mock",children:[{value:"Request Binding",id:"request-binding",children:[]},{value:"Other Binding",id:"other-binding",children:[]}]},{value:"Return value for testing evaluation",id:"return-value-for-testing-evaluation",children:[{value:"More advance return value",id:"more-advance-return-value",children:[]}]},{value:"Throw error if something bad happening",id:"throw-error-if-something-bad-happening",children:[]}],u={toc:l};function p(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To make testing easy, some tips below will make your testing easier"),(0,a.kt)("h2",{id:"pick-what-you-need-to-minimize-mock"},"Pick what you need to minimize mock"),(0,a.kt)("p",null,"The common problem of testing web api is mocking ",(0,a.kt)("inlineCode",{parentName:"p"},"Request")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Response")," object.\nPlumier provided a request binding to pick what part of request you need."),(0,a.kt)("h3",{id:"request-binding"},"Request Binding"),(0,a.kt)("p",null,"For example to get the Remote IP address you can provide a binding to IP request part like below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'export class UserController {\n    @route.post()\n    async saveUserIpAddress(@bind.request("ip") ip:string){\n        //your implementation\n        return success\n    }\n}\n')),(0,a.kt)("p",null,"Testing above code will not require any mocking"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'it("Should save user IP Address", async () => {\n    const controller = new UserController()\n    const success = await controller.saveUserIpAddress("125.162.125.309")\n    expect(success).toBe(true)\n}\n')),(0,a.kt)("h3",{id:"other-binding"},"Other Binding"),(0,a.kt)("p",null,"You can almost get every part of request with ",(0,a.kt)("inlineCode",{parentName:"p"},"@bind.request(<part>)"),", But in some case you need to get part of the object to prevent mocking. For example you need to get ",(0,a.kt)("inlineCode",{parentName:"p"},"x-api-key")," and the request body at the same time, use ",(0,a.kt)("inlineCode",{parentName:"p"},"@bind.header()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"@bind.body()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'export class UserController {\n    @route.post()\n    async saveUser(@bind.header("x-api-key") apiKey:string, @bind.body() user:any){\n        //your implementation\n        return success\n    }\n}\n')),(0,a.kt)("p",null,"The testing part will be like below"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'it("Should save user and api key", async () => {\n    const controller = new UserController()\n    const success = await controller.saveUser("<api key>", { user: "John Doe" })\n    expect(success).toBe(true)\n}\n')),(0,a.kt)("h2",{id:"return-value-for-testing-evaluation"},"Return value for testing evaluation"),(0,a.kt)("p",null,"You might be thinking how do we use ",(0,a.kt)("inlineCode",{parentName:"p"},"Response")," on Plumier, actually we don't. Plumier will automatically return JSON from what your action's return value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export class UserController {\n    @route.post()\n    async saveUser(@bind.body() user:any){\n        //your implementation\n        return { newId }\n    }\n}\n")),(0,a.kt)("p",null,"By returning raw value like above code, evaluating the result will be easy without needing to mock ",(0,a.kt)("inlineCode",{parentName:"p"},"Response")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Context"),". The testing will be as easy as below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'it("Should save user and api key", async () => {\n    const controller = new UserController()\n    const result = await controller.saveUser("<api key>", { user: "John Doe" })\n    expect(result.newId).toBe(1234)\n}\n')),(0,a.kt)("h3",{id:"more-advance-return-value"},"More advance return value"),(0,a.kt)("p",null,"In some case you need more advance return value such as setting header and some response status code. You can return ",(0,a.kt)("inlineCode",{parentName:"p"},"ActionResult")," and evaluate it easily."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export class UserController {\n    @route.post()\n    async saveUser(@bind.body() user:any){\n        //your implementation\n        return new ActionResult({ newId }, 201)\n    }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'it("Should save user and api key", async () => {\n    const controller = new UserController()\n    const result = await controller.saveUser("<api key>", { user: "John Doe" })\n    expect(result.body.newId).toBe(1234)\n    expect(result.status).toBe(201)\n}\n')),(0,a.kt)("h2",{id:"throw-error-if-something-bad-happening"},"Throw error if something bad happening"),(0,a.kt)("p",null,"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"ActionResult")," might be good to return response with status code, but in some case for example data validation, using ",(0,a.kt)("inlineCode",{parentName:"p"},"ActionResult")," may be bad because it introduce more return value to evaluate."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'export class UserController {\n    @route.post()\n    async saveUser(@bind.body() user:any){\n        if(await isExists(user.username)) {\n            return new ActionResult("Username exists", 400)\n        }\n        //your implementation\n        return new ActionResult({ newId }, 201)\n    }\n}\n')),(0,a.kt)("p",null,"You can also simply throw ",(0,a.kt)("inlineCode",{parentName:"p"},"HttpStatusError")," to make the code control flow look better."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export class UserController {\n    @route.post()\n    async saveUser(@bind.body() user:any){\n        if(await isExists(user.userName)) {\n            throw new HttpStatusError(400)\n        }\n        //your implementation\n        return new ActionResult({ newId }, 201)\n    }\n}\n")),(0,a.kt)("p",null,"The testing part will be a lot easier"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'it("Should throw 400 if username exists", async () => {\n    const controller = new UserController()\n    expect(controller.saveUser({ userName: "john" })).rejects.toEqual(new HttpStatusError(400))\n}\n')))}p.isMDXComponent=!0}}]);