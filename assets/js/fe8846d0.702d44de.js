(self.webpackChunkplumier_docs=self.webpackChunkplumier_docs||[]).push([[951],{876:function(e,t,r){"use strict";r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(2784);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=s(r),m=o,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||l;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,i=new Array(l);i[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var s=2;s<l;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7623:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return a},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var n=r(7560),o=r(8283),l=(r(2784),r(876)),i=["components"],a={id:"controller-invoker",title:"Controller Invoker"},c={unversionedId:"refs/controller-invoker",id:"refs/controller-invoker",isDocsHomePage:!1,title:"Controller Invoker",description:"Sometime its necessary to get the result of another controller including its middleware execution, from inside another controller or from a middleware. The real case for this function is create a redirect request without changing the URL.",source:"@site/docs/refs/Controller-Invoker.md",sourceDirName:"refs",slug:"/refs/controller-invoker",permalink:"/refs/controller-invoker",editUrl:"https://github.com/plumier/plumier/edit/master/docs/docusaurus/docs/refs/Controller-Invoker.md",version:"current",frontMatter:{id:"controller-invoker",title:"Controller Invoker"}},s=[{value:"Signature",id:"signature",children:[]},{value:"Context State",id:"context-state",children:[]},{value:"Example Usage",id:"example-usage",children:[]},{value:"Caveat",id:"caveat",children:[]}],u={toc:s};function p(e){var t=e.components,r=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Sometime its necessary to get the result of another controller including its middleware execution, from inside another controller or from a middleware. The real case for this function is create a redirect request without changing the URL."),(0,l.kt)("p",null,"Controller invoker execute the middleware pipeline to execute controller including its middleware, its returned ",(0,l.kt)("inlineCode",{parentName:"p"},"ActionResult")," so it can be returned from inside the calling controller or middleware. Its support all HTTP Method as long as it has the same signature and provided a proper parameters (see Caveat at the last section)"),(0,l.kt)("h3",{id:"signature"},"Signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function invoke(ctx: Context, route: RouteInfo)\n")),(0,l.kt)("p",null,"Parameters: "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ctx")," the request context "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"route")," route info metadata of the controller will be invoked, route metadata information can be retrieved from ",(0,l.kt)("inlineCode",{parentName:"li"},"ctx.routes"))),(0,l.kt)("h3",{id:"context-state"},"Context State"),(0,l.kt)("p",null,"When called from inside middleware its necessary to check the context state to prevent infinite call loop. Plumier provide ",(0,l.kt)("inlineCode",{parentName:"p"},"ctx.state.caller")," property which possibly contains value: "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"system")," mean the request called by the Plumier request system."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"invoke")," mean the request called by controller invoker.")),(0,l.kt)("h3",{id:"example-usage"},"Example Usage"),(0,l.kt)("p",null,"Invoke another controller from inside controller "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'class AnimalController {\n    get() {\n        return { method: "get" }\n    }\n\n    list(@bind.ctx() ctx:Context){\n        //invoke the AnimalController.get \n        return invoke(ctx, ctx.routes.find(x => x.action.name === "get")!)\n    }\n}\n')),(0,l.kt)("p",null,"Invoke another controller from inside middleware "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'class AnimalMiddleware implements Middleware {\n    execute(i: Readonly<Invocation>): Promise<ActionResult> {\n        //make sure to check the context state property\n        //only invoke another controller if the state is "system"\n        if (i.ctx.state.caller === "system" && i.ctx.request.path === "/hello")\n                //assume that it execute the first controller\'s action\n                return invoke(i.ctx, i.ctx.routes[0])\n            else\n                return i.proceed()\n    }\n}\n')),(0,l.kt)("p",null,"Above middleware will create a new route ",(0,l.kt)("inlineCode",{parentName:"p"},"/hello")," that will execute the first controller's action registered in Plumier system."),(0,l.kt)("h3",{id:"caveat"},"Caveat"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"When called from inside controller, the calling action must have the same signature with the called action. "),(0,l.kt)("li",{parentName:"ul"},"When called from inside middleware with a new endpoint, make sure to populate the ",(0,l.kt)("inlineCode",{parentName:"li"},"ctx.parameters")," to supply the controller's action accordingly.")))}p.isMDXComponent=!0}}]);