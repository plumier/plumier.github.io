(self.webpackChunkplumier_docs=self.webpackChunkplumier_docs||[]).push([[631],{876:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6124:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var r=n(7560),o=n(8283),a=(n(2784),n(876)),i=["components"],l={id:"custom-route-generator",title:"Custom Route Generator"},u={unversionedId:"custom-route-generator",id:"custom-route-generator",isDocsHomePage:!1,title:"Custom Route Generator",description:"Plumier provided extension point to be able to extends the route generation system. This functionalities important when you develop a Facility that handles an endpoint internally and you want this endpoint visible on route analysis or Swagger UI.",source:"@site/docs/Custom-Route-Generator.md",sourceDirName:".",slug:"/custom-route-generator",permalink:"/custom-route-generator",editUrl:"https://github.com/plumier/plumier/edit/master/docs/docusaurus/docs/Custom-Route-Generator.md",version:"current",frontMatter:{id:"custom-route-generator",title:"Custom Route Generator"},sidebar:"overview",previous:{title:"Custom Dependency Resolver",permalink:"/custom-dependency-resolver"}},c=[{value:"Action Routes and Virtual Routes",id:"action-routes-and-virtual-routes",children:[]},{value:"Example",id:"example",children:[]},{value:"Generate ActionRoute from Controller",id:"generate-actionroute-from-controller",children:[]}],s={toc:c};function p(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Plumier provided extension point to be able to extends the route generation system. This functionalities important when you develop a Facility that handles an endpoint internally and you want this endpoint visible on route analysis or Swagger UI."),(0,a.kt)("h2",{id:"action-routes-and-virtual-routes"},"Action Routes and Virtual Routes"),(0,a.kt)("p",null,"Plumier provided ",(0,a.kt)("inlineCode",{parentName:"p"},"RouteMetadata")," type which separated into 2 kinds:  "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ActionRoute")," is a kind of route that handled by controller, this route will have Controller and Action metadata information required by the Open API Specification."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"VirtualRoute")," is a kind of route that handled internally by a middleware, this route doesn't have Controller associated thus it need to specify Open API Specification for ",(0,a.kt)("inlineCode",{parentName:"li"},"Operation")," itself. ")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"For example you develop a Facility that handles and endpoint to generate CSRF key for the client ",(0,a.kt)("inlineCode",{parentName:"p"},"/auth/generate-csrf"),". First you create middleware that handles the ",(0,a.kt)("inlineCode",{parentName:"p"},"/auth/generate-csrf")," endpoint like below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { CustomMiddlewareFunction, ActionResult } from "@Plumier/core"\n\nconst CsrfMiddleware: CustomMiddlewareFunction = async ({ ctx, proceed }) => {\n    if (ctx.method === "GET" && ctx.path.toLocaleLowerCase() === "/auth/generate-csrf") \n        return new ActionResult()\n            .setCookie("__csrf_key", "your generated csrf key")\n    else\n        return proceed()\n}\n')),(0,a.kt)("p",null,"Next you register your middleware above and provide the Virtual Route definition for the ",(0,a.kt)("inlineCode",{parentName:"p"},"/auth/generate-csrf")," endpoint like below"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { DefaultFacility, RouteMetadata, PlumierApplication } from "@plumier/core"\n\nclass CsrfGenerationFacility extends DefaultFacility {\n    async generateRoutes(): Promise<RouteMetadata[]> {\n        return [{\n            kind: "VirtualRoute",\n            method: "get",\n            provider: CsrfGenerationFacility,\n            url: "/auth/generate-csrf",\n            access: "Public",\n            openApiOperation: /** Operation Open API 3.0 Specification **/\n        }]\n    }\n\n    setup(app: Readonly<PlumierApplication>): void {\n        app.use(CsrfMiddleware)\n    }\n}\n')),(0,a.kt)("h2",{id:"generate-actionroute-from-controller"},"Generate ActionRoute from Controller"),(0,a.kt)("p",null,"Plumier provided function to generate route metadata from controller ",(0,a.kt)("inlineCode",{parentName:"p"},"generateRoutes"),". To generate routes from controller simply call the function like below: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'class CsrfController {\n    @route.get("/auth/generate-csrf")\n    get(){\n        return new ActionResult()\n            .setCookie("__csrf_key", "your generated csrf key")\n    }\n}\n')),(0,a.kt)("p",null,"Then you can generate the controller from the facility like below "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { DefaultFacility, RouteMetadata, PlumierApplication, generateRoutes } from "@plumier/core"\n\nclass CsrfGenerationFacility extends DefaultFacility {\n    async generateRoutes(): Promise<RouteMetadata[]> {\n        return generateRoutes(CsrfController)\n    }\n\n    setup(app: Readonly<PlumierApplication>): void {\n        app.use(CsrfMiddleware)\n    }\n}\n')))}p.isMDXComponent=!0}}]);