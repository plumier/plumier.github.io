(self.webpackChunkplumier_docs=self.webpackChunkplumier_docs||[]).push([[360],{876:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,w=p["".concat(d,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(w,i(i({ref:t},s),{},{components:n})):r.createElement(w,i({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6708:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var r=n(7560),o=n(8283),a=(n(2784),n(876)),i=["components"],l={id:"middleware",title:"Middleware"},d={unversionedId:"middleware",id:"middleware",isDocsHomePage:!1,title:"Middleware",description:"Plumier middleware works exactly like Koa middleware, it executed in a stack-like order and has full control of the next middleware.",source:"@site/docs/Middleware.md",sourceDirName:".",slug:"/middleware",permalink:"/middleware",editUrl:"https://github.com/plumier/plumier/edit/master/docs/docusaurus/docs/Middleware.md",version:"current",frontMatter:{id:"middleware",title:"Middleware"},sidebar:"overview",previous:{title:"Validation",permalink:"/validation"},next:{title:"Facility",permalink:"/facility"}},c=[{value:"Signature",id:"signature",children:[]},{value:"Develop Your Own Middleware",id:"develop-your-own-middleware",children:[]},{value:"Interception",id:"interception",children:[{value:"Intercept Before",id:"intercept-before",children:[]},{value:"Intercept After",id:"intercept-after",children:[]},{value:"Intercept Around",id:"intercept-around",children:[]},{value:"Middleware Communication",id:"middleware-communication",children:[]}]}],s={toc:c};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Plumier middleware works exactly like Koa middleware, it executed in a stack-like order and has full control of the next middleware. "),(0,a.kt)("p",null,"The different between Plumier middleware and Koa middleware is Plumier middleware is a stateless class which has a method that act like pure function. It doesn't mutate things but returns value. With this behavior Plumier middleware relatively easy to unit test in isolation."),(0,a.kt)("h2",{id:"signature"},"Signature"),(0,a.kt)("p",null,"Plumier middleware can be a function match ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomMiddlewareFunction")," signature or a class that implements ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomMiddleware")," interface. The signature is like below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type CustomMiddlewareFunction = (next: Readonly<Invocation>) => Promise<ActionResult>\n\ninterface CustomMiddleware {\n    execute(next: Readonly<Invocation>): Promise<ActionResult>\n}\n\ninterface Invocation {\n    context: Readonly<Context>\n    proceed(): Promise<ActionResult>\n}\n")),(0,a.kt)("p",null,"Middleware has one parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"next")," which is an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"Invocation")," object to proceed the next middleware.\nMiddleware must return a promised ",(0,a.kt)("inlineCode",{parentName:"p"},"ActionResult"),", you can return result of the invocation which mean its return\nresult of previous middleware (its possibly the result of the action if the next middlewares doesn't modify the result).\nYou can also return modified version of action result or a brand new action result. You can also throw an error from\ninside of middleware, the default error handler will handle it properly."),(0,a.kt)("h2",{id:"develop-your-own-middleware"},"Develop Your Own Middleware"),(0,a.kt)("p",null,"To create a plumier middleware is as easy as Koa middleware, The idea is the same but simpler. The most basic middleware that does nothing is like below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"class BasicMiddleware implements CustomMiddleware {\n    execute(next: Readonly<Invocation>): Promise<ActionResult> {\n        return next.proceed()\n    }\n}\n")),(0,a.kt)("p",null,"Middleware above only execute the next middleware and pass its result into previous middleware. "),(0,a.kt)("p",null,"More real world example is creating a error handler middleware, For example we need to log all internal error 500\ninto database for auditing process."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"class BasicMiddleware implements CustomMiddleware {\n    async execute(next: Readonly<Invocation>): Promise<ActionResult> {\n        try{\n            return await next.proceed()\n        }\n        catch (e){\n            if(e instance of HttpStatusError && e.status === 500){\n                //save error to db\n            }\n            //just re-throw it and let default error handler handle it\n            throw e\n        }\n    }\n}\n")),(0,a.kt)("h2",{id:"interception"},"Interception"),(0,a.kt)("p",null,"Middleware has full control of the next middleware, with this behavior we can do interception easily.\nThere are 3 types of interception: before, after and around."),(0,a.kt)("h3",{id:"intercept-before"},"Intercept Before"),(0,a.kt)("p",null,"Interception occurs before the next execution proceeded. For example the authorization middleware,\nwhere the interception occur before proceeded. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Middleware, Invocation, ActionResult, HttpStatusError } from "plumier"\n\nclass AdminOnlyMiddleware implements CustomMiddleware {\n    execute(next: Readonly<Invocation>): Promise<ActionResult> {\n        if(next.ctx.state.user.role !== "Admin")\n            throw new HttpStatusError(401)\n        else\n            return next.proceed()\n    }\n}\n')),(0,a.kt)("p",null,"Above code showing that we intercept the process before proceeding to next middleware. If the user role\nis not Admin then throw Unauthorized status."),(0,a.kt)("h3",{id:"intercept-after"},"Intercept After"),(0,a.kt)("p",null,"Interception occurs after the next execution proceeded. For example we need to modify content of the result\nbased on http status."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Middleware, Invocation, ActionResult } from "plumier"\n\nclass ModifyResponseMiddleware implements CustomMiddleware {\n    async execute(next: Readonly<Invocation>): Promise<ActionResult> {\n        const result = await next.proceed()\n        if(result.status === 500){\n            //do something and return ActionResult\n        }\n        else\n            return result\n    }\n}\n')),(0,a.kt)("h3",{id:"intercept-around"},"Intercept Around"),(0,a.kt)("p",null,"Interception occurs before and after the next execution. For example we need to log the response time of every request."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Middleware, Invocation, ActionResult } from "plumier"\n\nclass ResponseTimeMiddleware implements CustomMiddleware {\n    async execute(next: Readonly<Invocation>): Promise<ActionResult> {\n        console.time("Response Time")\n        const result = await next.execute()\n        console.timeEnd("Response Time")\n        return result\n    }\n}\n')),(0,a.kt)("h3",{id:"middleware-communication"},"Middleware Communication"),(0,a.kt)("p",null,"In some case you may need to set some values that will be passed to the next middleware or to the controller. Koa provide a mutable property called ",(0,a.kt)("inlineCode",{parentName:"p"},"state")," under the ",(0,a.kt)("inlineCode",{parentName:"p"},"Context")," class. You can access it anywhere under ",(0,a.kt)("inlineCode",{parentName:"p"},"ctx.state")," property on the custom extension. "),(0,a.kt)("p",null,"Optionally, to provide the intellisense under ",(0,a.kt)("inlineCode",{parentName:"p"},"ctx.state.<yourProperty>"),", we can augment the ",(0,a.kt)("inlineCode",{parentName:"p"},"DefaultState")," type and add property you like."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { DefaultState } from "koa"\n\ndeclare module "koa" {\n    interface DefaultState {\n        yourProperty?: MyDataType\n    }\n}\n')),(0,a.kt)("p",null,"Then from inside your middleware you can set the value like below"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'class MyCoolMiddleware implements CustomMiddleware {\n    execute(next: Readonly<Invocation>): Promise<ActionResult> {\n        next.ctx.state.yourProperty = { lorem: "Ipsum" }\n        return next.proceed()\n    }\n}\n')),(0,a.kt)("p",null,"From inside controller the value can be accessed using ",(0,a.kt)("inlineCode",{parentName:"p"},"@bind.ctx()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Context } from "koa"\n\nclass MyCoolController {\n\n    @route.get()\n    get(@bind.ctx() ctx: Context) {\n        const myProp = ctx.state.yourProperty \n    }\n}\n')))}u.isMDXComponent=!0}}]);