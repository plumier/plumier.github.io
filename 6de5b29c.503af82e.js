(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{111:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return b}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),s=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=s(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(t),u=o,b=m["".concat(i,".").concat(u)]||m[u]||d[u]||a;return t?r.a.createElement(b,l(l({ref:n},p),{},{components:t})):r.a.createElement(b,l({ref:n},p))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},91:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return s}));var o=t(3),r=t(7),a=(t(0),t(111)),i={id:"mongoose-helper",title:"Mongoose Helper"},l={unversionedId:"mongoose-helper",id:"mongoose-helper",isDocsHomePage:!1,title:"Mongoose Helper",description:"Generate Mongoose schema based on your domain model.",source:"@site/docs/Mongoose-Helper.md",slug:"/mongoose-helper",permalink:"/mongoose-helper",editUrl:"https://github.com/plumier/plumier/edit/master/website/docs/Mongoose-Helper.md",version:"current",sidebar:"overview",previous:{title:"TypeORM Helper",permalink:"/typeorm-helper"},next:{title:"Swagger",permalink:"/swagger"}},c=[{value:"Enable The Functionality",id:"enable-the-functionality",children:[]},{value:"Domain Model Declaration",id:"domain-model-declaration",children:[{value:"Using Property Field",id:"using-property-field",children:[]},{value:"Using TypeScript Parameter Properties",id:"using-typescript-parameter-properties",children:[]}]},{value:"Helper API Overview",id:"helper-api-overview",children:[]},{value:"Helper API",id:"helper-api",children:[{value:"Basic Schema Generation",id:"basic-schema-generation",children:[]},{value:"Advanced Data Type",id:"advanced-data-type",children:[]},{value:"Nested Document With Ref (Populate)",id:"nested-document-with-ref-populate",children:[]},{value:"Configure Properties",id:"configure-properties",children:[]},{value:"Inheritance",id:"inheritance",children:[]},{value:"Custom Model Name",id:"custom-model-name",children:[]},{value:"Schema Generation Hook",id:"schema-generation-hook",children:[]},{value:"PreSave Decorator",id:"presave-decorator",children:[]}]},{value:"Relation with Cyclic Dependency",id:"relation-with-cyclic-dependency",children:[]},{value:"Unique Validation",id:"unique-validation",children:[]},{value:"POST Form With Relational Data",id:"post-form-with-relational-data",children:[]}],p={toc:c};function s(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Generate ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"http://mongoosejs.com/"}),"Mongoose")," schema based on your domain model."),Object(a.b)("h2",{id:"enable-the-functionality"},"Enable The Functionality"),Object(a.b)("p",null,"MongoDB helper is optional in Plumier, it can be enabled by installing ",Object(a.b)("inlineCode",{parentName:"p"},"@plumier/mongoose")," module and plug ",Object(a.b)("inlineCode",{parentName:"p"},"MongooseFacility")," into Plumier application."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'const plum = new Plumier()\nplum.set(new MongooseFacility({ uri: "mongodb://localhost:27017/test-data" }))\n//if no uri provided will check for environment variable PLUM_MONGODB_URI\nplum.set(new MongooseFacility())\n')),Object(a.b)("p",null,"Mongoose facility will automatically connect to the MongoDB database and make sure it ready before application started."),Object(a.b)("p",null,"There are several ways to use the mongodb connection: "),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"By providing the uri on the ",Object(a.b)("inlineCode",{parentName:"li"},"MongooseFacility")," constructor, like example above."),Object(a.b)("li",{parentName:"ol"},"By providing the environment variable named ",Object(a.b)("inlineCode",{parentName:"li"},"PLUM_MONGODB_URI"),". This can be achieve using ",Object(a.b)("inlineCode",{parentName:"li"},".env")," file or by set the environment variable manually."),Object(a.b)("li",{parentName:"ol"},"If none above provided, connection should be done manually using ",Object(a.b)("inlineCode",{parentName:"li"},"mongoose.connect()")," function. ")),Object(a.b)("h2",{id:"domain-model-declaration"},"Domain Model Declaration"),Object(a.b)("p",null,"Plumier Mongoose Helper uses reflection to extract type metadata on runtime. Currently there are two domain models declaration supported"),Object(a.b)("h3",{id:"using-property-field"},"Using Property Field"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'import {collection } from "@plumier/mongoose"\n\n@collection()\nclass Dummy {\n    @collection.property()\n    stringProp: string\n\n    @collection.property()\n    numberProp: number\n\n    @collection.property()\n    booleanProp: boolean\n\n    @collection.property()\n    dateProp: Date\n}\n')),Object(a.b)("p",null,"This is the common model declaration when you are familiar with Nest.js or other TypeScript framework. This declaration required ",Object(a.b)("inlineCode",{parentName:"p"},"strictPropertyInitialization")," disabled on ",Object(a.b)("inlineCode",{parentName:"p"},"tsconfig.json")," file. Note that the ",Object(a.b)("inlineCode",{parentName:"p"},"@collection.property()")," is required when there are no decorator applied on the property. "),Object(a.b)("h3",{id:"using-typescript-parameter-properties"},"Using TypeScript Parameter Properties"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'import {collection } from "@plumier/mongoose"\n\n@collection()\nclass Dummy {\n    constructor(\n        public stringProp: string,\n        public numberProp: number,\n        public booleanProp: boolean,\n        public dateProp: Date\n    ) { }\n}\n')),Object(a.b)("p",null,"This declaration good when ",Object(a.b)("inlineCode",{parentName:"p"},"tsconfig.json")," uses ",Object(a.b)("inlineCode",{parentName:"p"},"strict: true")," because we unable to use field properties. Using this declaration reduce the need of using ",Object(a.b)("inlineCode",{parentName:"p"},"@collection.properties()")," on all properties. "),Object(a.b)("h2",{id:"helper-api-overview"},"Helper API Overview"),Object(a.b)("p",null,"Plumier Mongoose Helper help you easily map your domain model and create Mongoose model using it. Helper automatically generate schema definition based on your domain model metadata."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'import { model, collection } from "@plumier/mongoose"\n\n// base class, all derived class will inherit the behavior\n@collection({ timestamp: true, toJSON: { virtuals: true } })\nclass Domain {\n    @collection.property()\n    id:string\n    @collection.property({ default:false })\n    deleted:boolean\n    @collection.property()\n    createdAt:Date\n    @collection.property()\n    updatedAt:Date\n}\n\n@collection()\nclass User extends Domain{\n    constructor(\n        public name:string,\n        @collection.property({ unique:true })\n        public email:string,\n        public dateOfBirth: Date\n    ) { super() }\n}\n\n// create mongoose model\nconst UserModel = model(User)\n\n@collection()\nclass UserActivity extends Domain {\n    constructor(\n        @collection.ref(User)\n        public user: User,\n        @collection.property({ default: () => new Date() })\n        public date: Date,\n        public browser:string,\n        public os:string,\n        @reflect.types([Number])\n        public latLong: number[]\n    ){ super() }\n}\n\n// create mongoose model\nconst UserActivityModel = model(UserActivity)\n')),Object(a.b)("h2",{id:"helper-api"},"Helper API"),Object(a.b)("h3",{id:"basic-schema-generation"},"Basic Schema Generation"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'import { model, collection } from "@plumier/mongoose"\n\n@collection()\nclass Dummy {\n    constructor(\n        public stringProp: string,\n        public numberProp: number,\n        public booleanProp: boolean,\n        public dateProp: Date\n    ) { }\n}\n// create Mongoose model by using below\nconst DummyModel = model(Dummy)\n// example usage\nconst result = await DummyModel.findById(<id>)\n// model can be called multiple time to create other model instance\n// for example from inside controller or in other place\nconst SecondDummyModel = model(Dummy)\n')),Object(a.b)("h3",{id:"advanced-data-type"},"Advanced Data Type"),Object(a.b)("p",null,"Array type required extra decorator information. Use ",Object(a.b)("inlineCode",{parentName:"p"},"@reflect.type([<type>])")," decorator to inform generator about extra type information."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'import { model, collection } from "@plumier/mongoose"\n\n@collection()\nclass Child {\n    constructor(\n        public name:string\n    ){}\n}\n\n@collection()\nclass Dummy {\n    constructor(\n        // primitive array\n        @reflect.type([String])\n        public arrayOfPrimitive: string[],\n\n        // nested type \n        public child: Child,\n\n        // nested array of model \n        @reflect.type([Child])\n        public children: Child[],\n    ) { }\n}\n\nconst DummyModel = model(Dummy)\n')),Object(a.b)("h3",{id:"nested-document-with-ref-populate"},"Nested Document With Ref (Populate)"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'import { model, collection } from "@plumier/mongoose"\n\n@collection()\nclass Child {\n    constructor(\n        public name:string\n    ){}\n}\n\n@collection()\nclass Dummy {\n    constructor(\n        // nested type \n        @collection.ref(Child)\n        public child: Child,\n\n        // nested array of model \n        @collection.ref([Child])\n        public children: Child[],\n    ) { }\n}\n\nconst ChildModel = model(Child)\nconst DummyModel = model(Dummy)\n')),Object(a.b)("h3",{id:"configure-properties"},"Configure Properties"),Object(a.b)("p",null,"Extra Mongoose schema configuration can be passed to each decorator "),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'import { model, collection } from "@plumier/mongoose"\n\n@collection({ timestamps: true, toJSON: { virtuals: true } })\nclass Dummy {\n    constructor(\n        @collection.property({ uppercase:true })\n        public stringProp: string,\n        @collection.property({ unique:true })\n        public email: string,\n        @collection.property({ default:() => new Date() })\n        public dateProp: Date\n    ) { }\n}\n\nconst DummyModel = model(Dummy)\n')),Object(a.b)("h3",{id:"inheritance"},"Inheritance"),Object(a.b)("p",null,"Inheritance work naturally, all child document will inherit parent configuration properly. "),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'import { model, collection } from "@plumier/mongoose"\n\n@collection({ timestamp: true })\nclass DomainBase {\n    @collection.property({ default:false })\n    deleted:boolean\n    @collection.property()\n    createdAt:Date\n    @collection.property()\n    updatedAt:Date\n}\n\n@collection()\nclass Dummy extends DomainBase{\n    constructor(\n        public stringProp: string,\n        public numberProp: number,\n        public booleanProp: boolean,\n        public dateProp: Date\n    ) { super() }\n}\n\nconst DummyModel = model(Dummy)\n')),Object(a.b)("p",null,"Using configuration above, all class inherited from ",Object(a.b)("inlineCode",{parentName:"p"},"DomainBase")," will have ",Object(a.b)("inlineCode",{parentName:"p"},"deleted")," property with default value ",Object(a.b)("inlineCode",{parentName:"p"},"false")," and properties ",Object(a.b)("inlineCode",{parentName:"p"},"createdAt")," and ",Object(a.b)("inlineCode",{parentName:"p"},"updatedAt")," which automatically populated as timestamps."),Object(a.b)("h3",{id:"custom-model-name"},"Custom Model Name"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'import { model, collection } from "@plumier/mongoose"\n\n@collection({ name: "Empty" })\nclass Dummy {\n    constructor(\n        public stringProp: string,\n        public numberProp: number,\n        public booleanProp: boolean,\n        public dateProp: Date\n    ) { }\n}\nconst DummyModel = model(Dummy)\n// calling next model will not require passing name\nconst SecondDummyModel = model(Dummy)\n')),Object(a.b)("h3",{id:"schema-generation-hook"},"Schema Generation Hook"),Object(a.b)("p",null,"Its possible to provide hook when mongoose schema generated, so its possible to register the mongoose middleware from provided schema like below: "),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'@collection({\n    hook: (schema) => {\n        schema.pre("save", async function (this: Dummy & mongoose.Document) {\n            const newString = await new Promise<string>(resolve => setTimeout(() => resolve("Delayed"), 100))\n            this.stringProp = newString\n        })\n    } \n})\nclass Dummy {\n    constructor(\n        public stringProp: string,\n        public numberProp: number,\n        public booleanProp: boolean,\n        public dateProp: Date\n    ) { }\n}\nconst DummyModel = model(Dummy)\n')),Object(a.b)("h3",{id:"presave-decorator"},"PreSave Decorator"),Object(a.b)("p",null,"You can add hook during schema generation, but for simple use case to hash password before saving is too messy if using hook and ",Object(a.b)("inlineCode",{parentName:"p"},"pre")," middleware. Plumier provided ",Object(a.b)("inlineCode",{parentName:"p"},"@collection.preSave()")," decorator to automatically call decorated method before save."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'@collection()\nclass Dummy {\n    constructor(\n        public stringProp: string,\n        public numberProp: number,\n        public booleanProp: boolean,\n        public dateProp: Date\n    ) { }\n\n    @collection.preSave()\n    async beforeSave() {\n        this.stringProp = await new Promise<string>(resolve => setTimeout(() => resolve("Delayed"), 100))\n    }\n}\nconst DummyModel = model(Dummy)\n')),Object(a.b)("h2",{id:"relation-with-cyclic-dependency"},"Relation with Cyclic Dependency"),Object(a.b)("p",null,"Its possible to map relation with cyclic dependency using mongoose helper using ",Object(a.b)("inlineCode",{parentName:"p"},"proxy")," method. ",Object(a.b)("inlineCode",{parentName:"p"},"proxy")," will defer schema generation until its first accessed, thus make it able to get the proper data type."),Object(a.b)("div",{className:"admonition admonition-info alert alert--info"},Object(a.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(a.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(a.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"Note when you define model with cyclic dependency its required to use ",Object(a.b)("inlineCode",{parentName:"p"},"Ref<T>"),"  data type and use callback on the ",Object(a.b)("inlineCode",{parentName:"p"},"@collection.ref()")," parameter to prevent TypeScript ",Object(a.b)("inlineCode",{parentName:"p"},"ReferenceError: Model is not defined")," error."))),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'import { collection, proxy, Ref } from "@plumier/mongoose"\n\n@collection()\nclass Child {\n    constructor(\n        public name:string,\n        // use callback to define ref type\n        @collection.ref(x => Dummy)\n        // use Ref<T> to define data type\n        public dummy:Ref<Dummy>\n    ){}\n}\n\nconst ChildModel = proxy(Child)\n\n@collection()\nclass Dummy {\n    constructor(\n        public name:string,\n        // nested array of model \n        @collection.ref(x => [Child])\n        public children: Ref<Child[]>,\n    ) { }\n}\n\nconst DummyModel = proxy(Dummy)\n')),Object(a.b)("h2",{id:"unique-validation"},"Unique Validation"),Object(a.b)("p",null,"Mongoose helper provided ",Object(a.b)("inlineCode",{parentName:"p"},"@val.unique()")," that augmented (merged) with ",Object(a.b)("inlineCode",{parentName:"p"},"@plumier/validator")," module. Means if you install ",Object(a.b)("inlineCode",{parentName:"p"},"@plumier/mongoose")," ",Object(a.b)("inlineCode",{parentName:"p"},"@val")," decorator will automatically has ",Object(a.b)("inlineCode",{parentName:"p"},"unique()")," function."),Object(a.b)("p",null,"This function is not using the mongoose ",Object(a.b)("inlineCode",{parentName:"p"},"unique")," schema, but it automatically check to the database for uniqueness, so validation engine can execute the validation rule without touching controller."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'import { val } from "plumier"\n\n@collection()\nexport class User {\n    constructor(\n        public name: string,\n        @val.unique()\n        public email:string,\n        public image: string,\n        public address:string,\n        public city:string,\n        public zip:string,\n    ) { }\n}\n')),Object(a.b)("h2",{id:"post-form-with-relational-data"},"POST Form With Relational Data"),Object(a.b)("p",null,"Mongoose helper provided custom object converter, so it possible to post relational data (with populate) from HTML Form by providing the ObjectId of the child model."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),"//domains\n@collection()\nclass Image {\n    constructor(\n        public name: string\n    ) { }\n}\n@collection()\nclass Animal {\n    constructor(\n        public name: string,\n        @collection.ref([Image])\n        public images: Image[]\n    ) { }\n}\nconst ImageModel = model(Image)\nconst AnimalModel = model(Animal)\n\n//controller\nclass AnimalController {\n    @route.post()\n    async save(data: Animal) {\n        const newly = await new AnimalModel(data).save()\n        return newly._id\n    }\n}\n")),Object(a.b)("p",null,"Above code showing that we created a route named ",Object(a.b)("inlineCode",{parentName:"p"},"POST /animal/save")," which will save Animal information with relational data which is images data that previously saved. Below request will be valid:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),'POST /animal/save\npayload:\n{name: "Mimi", images: ["507f191e810c19729de860ea", "507f191e810c19729de239ca"]}\n')))}s.isMDXComponent=!0}}]);