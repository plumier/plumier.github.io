(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{113:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),p=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),s=p(n),m=a,u=s["".concat(l,".").concat(m)]||s[m]||d[m]||i;return n?r.a.createElement(u,o(o({ref:t},b),{},{components:n})):r.a.createElement(u,o({ref:t},b))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var b=2;b<i;b++)l[b]=n[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},67:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(113)),l={id:"controller",title:"Controller"},o={unversionedId:"controller",id:"controller",isDocsHomePage:!1,title:"Controller",description:"Controller is a group of similar functionalities placed in a single class, for example UserController contains functionalities to manage User. Plumier controller is a plain ES6 class contains several methods that will handle http request. Further it provided convention to automatically generate route based on its name, methods name and parameters name.",source:"@site/docs/Controller.md",slug:"/controller",permalink:"/controller",editUrl:"https://github.com/plumier/plumier/edit/master/docs/docusaurus/docs/Controller.md",version:"current",sidebar:"overview",previous:{title:"Quick Start",permalink:"/quick-start"},next:{title:"Security",permalink:"/security"}},c=[{value:"Controller Naming",id:"controller-naming",children:[]},{value:"Registration",id:"registration",children:[]},{value:"Parameter Binding",id:"parameter-binding",children:[]},{value:"Type Converter",id:"type-converter",children:[]},{value:"Controller Return Value",id:"controller-return-value",children:[]},{value:"Action Result",id:"action-result",children:[]},{value:"Throwing Errors",id:"throwing-errors",children:[]}],b={toc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Controller is a group of similar functionalities placed in a single class, for example ",Object(i.b)("inlineCode",{parentName:"p"},"UserController")," contains functionalities to manage User. Plumier controller is a plain ES6 class contains several methods that will handle http request. Further it provided convention to automatically generate route based on its name, methods name and parameters name."),Object(i.b)("h2",{id:"controller-naming"},"Controller Naming"),Object(i.b)("p",null,"Plumier doesn't strictly limit the controller name, except it must end with ",Object(i.b)("inlineCode",{parentName:"p"},"Controller")," word. This is useful when you have non controller class inside ",Object(i.b)("inlineCode",{parentName:"p"},"controller/")," directory. Controller naming best practice is using plural word, such as ",Object(i.b)("inlineCode",{parentName:"p"},"AnimalsController"),", ",Object(i.b)("inlineCode",{parentName:"p"},"UsersController")," "),Object(i.b)("h2",{id:"registration"},"Registration"),Object(i.b)("p",null,"By default controller registered automatically by traversed through all files ends with ",Object(i.b)("inlineCode",{parentName:"p"},"controller")," recursively (",Object(i.b)("inlineCode",{parentName:"p"},"./**/*policy.+(ts|js)"),"). For example ",Object(i.b)("inlineCode",{parentName:"p"},"user-controller.ts")," or ",Object(i.b)("inlineCode",{parentName:"p"},"user_controller.ts"),". "),Object(i.b)("p",null,"Its also possible to register controller in specific place using ",Object(i.b)("inlineCode",{parentName:"p"},"ControllerFacility")," using relative/absolute or glob path. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'new Plumier()\n    .set(new WebApiFacility())\n    .set(new ControllerFacility({ controller: "api/*/*-controller.*(ts|js)", rootPath: "api/v1" }))\n    .set(new ControllerFacility({ controller: "controller/*-controller.*(ts|js)" }))\n    .initialize()\n    .then(koa => koa.listen(8000))\n')),Object(i.b)("p",null,"But keep on mind that when using ",Object(i.b)("inlineCode",{parentName:"p"},"ControllerFacility")," the default registration behavior is overridden. "),Object(i.b)("h2",{id:"parameter-binding"},"Parameter Binding"),Object(i.b)("p",null,"Parameter binding is a Plumier feature to automatically bound request part (context/query/body) into action parameters. Plumier provided 3 kind of parameter binding: Decorator Binding, Name Binding, Model Binding. "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Decorator binding: Bind specific koa context into action parameter by using ",Object(i.b)("inlineCode",{parentName:"li"},"@bind")," decorator."),Object(i.b)("li",{parentName:"ul"},"Name binding: Bind query or request body part into action parameter based on parameter name."),Object(i.b)("li",{parentName:"ul"},"Model binding: Bind request body into parameter which is of type custom class and doesn't match above criteria (decorator binding, name binding)")),Object(i.b)("h4",{id:"decorator-binding"},"Decorator Binding"),Object(i.b)("p",null,"Bind action parameter using ",Object(i.b)("inlineCode",{parentName:"p"},"@bind")," decorator like example below"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"export class AnimalController {\n    @route.post()\n    save(@bind.ctx() ctx:Koa.Context){\n\n    }\n}\n")),Object(i.b)("p",null,"Some binding decorator accepts string parameter to access its child"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'export class AnimalController {\n    @route.post()\n    save(@bind.ctx("request.body") model:any){\n\n    }\n}\n')),Object(i.b)("p",null,"Above code is the same as accessing ",Object(i.b)("inlineCode",{parentName:"p"},"ctx.request.body"),". "),Object(i.b)("p",null,"Allowed path example: "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Using dot to access child property ",Object(i.b)("inlineCode",{parentName:"li"},"request.ip")," etc"),Object(i.b)("li",{parentName:"ul"},"Using array notation ",Object(i.b)("inlineCode",{parentName:"li"},"request.body[0]"))),Object(i.b)("p",null,"There are several built in binding decorator provided "),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Decorator"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"@bind.ctx()")),Object(i.b)("td",{parentName:"tr",align:null},"Bind request context into parameter")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"@bind.request()")),Object(i.b)("td",{parentName:"tr",align:null},"Bind request into parameter")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"@bind.body()")),Object(i.b)("td",{parentName:"tr",align:null},"Bind request body into parameter")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"@bind.query()")),Object(i.b)("td",{parentName:"tr",align:null},"Bind request query into parameter")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"@bind.header()")),Object(i.b)("td",{parentName:"tr",align:null},"Bind request header into parameter")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"@bind.user()")),Object(i.b)("td",{parentName:"tr",align:null},"Bind JWT claim (current user) into parameter")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"@bind.file()")),Object(i.b)("td",{parentName:"tr",align:null},"Bind file into parameter. ",Object(i.b)("a",{parentName:"td",href:"/file-upload#Bind-File-Parser"},"See here")," on detail how to use file binding")))),Object(i.b)("h4",{id:"name-binding"},"Name Binding"),Object(i.b)("p",null,"Name binding is when action parameter automatically assigned with query parameter or part of body request based on its name. For example: "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"GET /animal/get?type=canine&page=1\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"class AnimalController {\n    @route.get()\n    get(type:string, page:number){}\n}\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"type")," and ",Object(i.b)("inlineCode",{parentName:"p"},"page")," parameter above automatically assigned with ",Object(i.b)("inlineCode",{parentName:"p"},"canine")," and ",Object(i.b)("inlineCode",{parentName:"p"},"1"),". "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'POST /auth/login\nbody:\n{\n    username: "admin",\n    password: "super secret pwd"\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"class AuthController {\n    @route.post()\n    login(username:string, password:string){}\n}\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"username")," and ",Object(i.b)("inlineCode",{parentName:"p"},"password")," will automatically assigned with part of request body ",Object(i.b)("inlineCode",{parentName:"p"},"admin")," and ",Object(i.b)("inlineCode",{parentName:"p"},"super secret pwd"),"."),Object(i.b)("p",null,"More complex example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'POST /animal/save?type=canine\nbody: \n{ \n    name: "Mimi", \n    birthDate: "2018-1-1", \n    owner: { firstName: "John", lastName: "Doe" }\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"@domain()\nclass Human {\n    constructor(\n        firstName:string,\n        lastName:string\n    ){}\n}\n\nclass AnimalController {\n    @route.post()\n    save(type:string, name:string, birthDate:Date, owner:Human){}\n}\n")),Object(i.b)("p",null,"Example above showing that ",Object(i.b)("inlineCode",{parentName:"p"},"type")," parameter assigned with the query string ",Object(i.b)("inlineCode",{parentName:"p"},"canine")," and the request body spread into 3 parameters ",Object(i.b)("inlineCode",{parentName:"p"},"name"),", ",Object(i.b)("inlineCode",{parentName:"p"},"birthDate")," and ",Object(i.b)("inlineCode",{parentName:"p"},"owner"),"."),Object(i.b)("h4",{id:"model-binding"},"Model Binding"),Object(i.b)("p",null,"Model binding is the default behavior of parameter binding. Plumier by default will assigned request body to any parameter that has custom class type and doesn't match any binding criteria (Name Binding/Decorator binding)."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"@domain()\nclass Animal{\n    constructor(\n        public name:string,\n        public birthDate:Date,\n        public owner:Human\n    )\n}\n\nclass AnimalController {\n    @route.post()\n    save(type:string, animal:Animal){}\n}\n")),Object(i.b)("p",null,"Request"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'POST /animal/save?type=canine\nbody: \n{ \n    name: "Mimi", \n    birthDate: "2018-1-1", \n    owner: { firstName: "John", lastName: "Doe" }\n}\n')),Object(i.b)("p",null,"Above code, the ",Object(i.b)("inlineCode",{parentName:"p"},"animal")," parameter in ",Object(i.b)("inlineCode",{parentName:"p"},"save")," action will automatically bound with request body."),Object(i.b)("h4",{id:"file-binding"},"File Binding"),Object(i.b)("p",null,"Unlike File binding, File binding works like name binding and retrieve file(s) that already parsed into the parameter. Parameter type should be of type ",Object(i.b)("inlineCode",{parentName:"p"},"FormFile"),". "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"interface FormFile {\n    size:number\n    path:string\n    name:string\n    type:string\n    mtime?:string\n}\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"size"),": Size of the file (bytes)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"path"),": Temporary path of the uploaded file"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": File name provided by client"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"type"),": Mime type of the file "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mtime"),": The file timestamp")),Object(i.b)("p",null,"By default this feature is not enable, you need to enable this feature like below: "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"new Plumier()\n    .set(new WebApiFacility({ bodyParser: { multipart: true } }))\n")),Object(i.b)("p",null,"Than on the controller simply do something like below"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"class PictureController {\n    @route.post()\n    save(image: FormFile) {\n        \n    }\n}\n")),Object(i.b)("p",null,"Above code will handle multipart form below"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-html"},'<form method="post" enctype="multipart/form-data" action="/picture/save">\n    <input type="file" name="image"/>\n    <input type="submit" value="Upload"/>\n</form>\n')),Object(i.b)("p",null,"For multiple file upload, method's parameter can be specified using array like below"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'import { type } from "@plumier/reflect"\n\nclass PictureController {\n    @route.post()\n    save(@type(FormFile) image: FormFile[]) {\n        \n    }\n}\n')),Object(i.b)("h4",{id:"binding-behavior"},"Binding Behavior"),Object(i.b)("p",null,"In order to properly bound the request, plumier use priority based on parameter binding kind above."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Decorator binding is be the first priority"),Object(i.b)("li",{parentName:"ul"},"Name binding is the second priority"),Object(i.b)("li",{parentName:"ul"},"Model binding is the last")),Object(i.b)("p",null,"Its mean when an action parameter decorated with ",Object(i.b)("inlineCode",{parentName:"p"},"@bind")," decorator it will not further check for name binding nor model binding. If an action parameter doesn't decorated with ",Object(i.b)("inlineCode",{parentName:"p"},"@bind")," but its name match with a query parameter, it will not further check for model binding and so on."),Object(i.b)("h2",{id:"type-converter"},"Type Converter"),Object(i.b)("p",null,"Plumier automatically convert values provided by parameter binding match with parameter data type. If provided value doesn't match provided data type type http 422 error will be thrown. "),Object(i.b)("h4",{id:"number-converter"},"Number Converter"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"export class AnimalController {\n    @route.get()\n    get(id:number){}\n}\n")),Object(i.b)("p",null,"id parameter will automatically convert to ",Object(i.b)("inlineCode",{parentName:"p"},"number")," inside ",Object(i.b)("inlineCode",{parentName:"p"},"get")," action"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"GET /animal/get?id=123    -> 123\nGET /animal/get?id=123.33 -> 123.33\nGET /animal/get?id=hello  -> Error status 400 \n")),Object(i.b)("h4",{id:"boolean-converter"},"Boolean Converter"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"export class AnimalController {\n    @route.get()\n    get(id:boolean){}\n}\n")),Object(i.b)("p",null,"id parameter will automatically convert to ",Object(i.b)("inlineCode",{parentName:"p"},"boolean")," inside ",Object(i.b)("inlineCode",{parentName:"p"},"get")," action"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"GET /animal/get?id=ON    -> true\nGET /animal/get?id=on    -> true\nGET /animal/get?id=On    -> true\nGET /animal/get?id=TRUE  -> true\nGET /animal/get?id=True  -> true\nGET /animal/get?id=true  -> true\nGET /animal/get?id=Hello -> Error status 400 \n// working values (case insensitive): \n// ON, OFF, YES, NO, TRUE, FALSE, 1, 0\n")),Object(i.b)("h4",{id:"date-converter"},"Date Converter"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"export class AnimalController {\n    @route.get()\n    get(id:Date){}\n}\n")),Object(i.b)("p",null,"id parameter will automatically convert to ",Object(i.b)("inlineCode",{parentName:"p"},"Date")," inside ",Object(i.b)("inlineCode",{parentName:"p"},"get")," action"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"GET /animal/get?id=2018-2-1    -> equals to new Date(2018, 2, 1)\nGET /animal/get?id=hello       -> Error status 400\n")),Object(i.b)("h4",{id:"object-converter"},"Object Converter"),Object(i.b)("p",null,"Object converter only works for POST and PUT method"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"@domain() \nclass Animal {\n    constructor(\n        public id:number,\n        public name:string,\n        public deceased:boolean,\n        public birthday:Date\n    ){}\n}\n\nexport class AnimalController {\n    @route.post()\n    save(model:Animal){}\n}\n")),Object(i.b)("p",null,"model parameter will automatically convert to ",Object(i.b)("inlineCode",{parentName:"p"},"Animal")," inside ",Object(i.b)("inlineCode",{parentName:"p"},"save")," action"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'POST /animal/save\nJSON Payload: { id: "200", name: "Mimi", deceased: "ON", birthday: "2018-1-1" }\nResult: \nAnimalController {\n    id: 200,\n    name: "Mimi",\n    deceased: true,\n    birthday: Date //equals to new Date(2018,1,1)\n}\n')),Object(i.b)("p",null,"Object converter also supported deep nested object conversion"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"@domain()\nclass Client {\n    constructor(\n        public id: number,\n        public name: string,\n        public join: Date\n    ) { }\n}\n@domain()\nclass Animal {\n    constructor(\n        public id: number,\n        public name: string,\n        public deceased: boolean,\n        public birthday: Date,\n        public owner: Client\n    ) { }\n}\n\nexport class AnimalController {\n    @route.post()\n    save(model:Animal){}\n}\n")),Object(i.b)("p",null,"model parameter will automatically convert to ",Object(i.b)("inlineCode",{parentName:"p"},"Animal")," inside ",Object(i.b)("inlineCode",{parentName:"p"},"save")," action"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'POST /animal/save\nJSON Payload: {\n    id: "200",\n    name: "Mimi",\n    deceased: "ON",\n    birthday: "2018-1-1",\n    owner: {\n        id: "400",\n        name: "John Doe",\n        join: "2015-1-1"\n    }\n}\n\nResult: \nAnimal {\n    birthday: new Date("2018-1-1"), \n    deceased: true, \n    id: 200, \n    name: "Mimi",\n    owner: Client {\n        id: 400,\n        name: "John Doe",\n        join: new Date("2015-1-1")\n    }\n}\n')),Object(i.b)("h4",{id:"array-converter"},"Array Converter"),Object(i.b)("p",null,"Array converter a little bit different due to TypeScript ",Object(i.b)("a",{parentName:"p",href:"https://github.com/Microsoft/TypeScript/issues/12463"},"design type emit limitation"),", use ",Object(i.b)("inlineCode",{parentName:"p"},"@plumier/reflect")," ",Object(i.b)("inlineCode",{parentName:"p"},"@type()")," decorator to specify array element data type."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'import { type } from "@plumier/reflect"\n\n@domain() \nclass AnimalDto {\n    constructor(\n        public id:number\n        public name:string\n        public deceased:boolean\n        public birthday:Date\n    ){}\n}\n\nexport class AnimalController {\n    @route.post()\n    save(@type([AnimalDto]) model:AnimalDto[]){}\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'POST /animal/save\nJSON Payload: [{ id: "200", name: "Mimi", deceased: "ON", birthday: "2018-1-1" }]\nResult: \n[{\n    id: 200,\n    name: "Mimi",\n    deceased: true,\n    birthday: Date //equals to new Date(2018,1,1)\n}]\n')),Object(i.b)("h2",{id:"controller-return-value"},"Controller Return Value"),Object(i.b)("p",null,"Controller can return any JavaScript value including promised value and rendered into JSON response. Promised value automatically awaited during JSON serialization. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'class AnimalController {\n    @route.get(":id")\n    get(id:string){\n        // return promise directly from repository\n        return animalRepo.findById(id)\n    }\n}\n')),Object(i.b)("h4",{id:"return-value-data-type"},"Return Value Data Type"),Object(i.b)("p",null,"To get the proper result (for swagger and response authorization) its required to specify data type of the action return value by using ",Object(i.b)("inlineCode",{parentName:"p"},"@type")," decorator. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript",metastring:"{5,11}","{5,11}":!0},'import { type } from "@plumier/reflect"\n\nclass AnimalController {\n    @route.get(":id")\n    @type(x => Animal) // specify data type \n    get(id:string){\n        return animalRepo.findById(id)\n    }\n\n    @route.get("")\n    @type(x => [Animal]) // specify data type (array of Animal)\n    list() {\n        return animalRepo.find()\n    }\n}\n')),Object(i.b)("h2",{id:"action-result"},"Action Result"),Object(i.b)("p",null,"For more advance result that require setting http status or response header can be done using ",Object(i.b)("inlineCode",{parentName:"p"},"ActionResult"),"."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"ActionResult")," is a special class that used to create an Http Response. ",Object(i.b)("inlineCode",{parentName:"p"},"ActionResult")," has ability to modify Http Response which make it possible to make a custom response such as return an html, file, file download etc. "),Object(i.b)("h4",{id:"action-result-signature"},"Action Result Signature"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"ActionResult")," signature has some similarities with the http response like below:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"class ActionResult {\n    static fromContext(ctx: Context) : ActionResult\n    constructor(public body?: any, public status?: number)\n    setHeader(key: string, value: string) : ActionResult\n    setStatus(status: number): ActionResult\n    execute(ctx: Context): Promise<void> \n}\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fromContext")," create ",Object(i.b)("inlineCode",{parentName:"li"},"ActionResult")," from Koa context"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"setHeader")," set header that will be used by Http Response"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"setStatus")," set Http Status that will be use by Http Response"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"execute")," internally called by Plumier to generate Koa context and render the response")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"setHeader")," and ",Object(i.b)("inlineCode",{parentName:"p"},"setStatus")," designed to be chainable, so it will be able to create ",Object(i.b)("inlineCode",{parentName:"p"},"ActionResult")," object like below"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'return new ActionResult({ message: "The body" })\n    .setStatus(400)\n    .setHeader("key", "value")\n')),Object(i.b)("h4",{id:"action-result-implementation"},"Action Result Implementation"),Object(i.b)("p",null,"Currently now Plumier has three types of ",Object(i.b)("inlineCode",{parentName:"p"},"ActionResult")," implementation: "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ActionResult")," by default will returned JSON response"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RedirectActionResult")," used to redirect request to specific url, internally it calls Koa ",Object(i.b)("inlineCode",{parentName:"li"},"Context.redirect")," "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"FileActionResult")," returned a file response based on provided file path. This class only enable when ",Object(i.b)("inlineCode",{parentName:"li"},"@plumier/serve-static")," installed.")),Object(i.b)("p",null,"A shorthand namespace available to access all of above implementation called ",Object(i.b)("inlineCode",{parentName:"p"},"response")," "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'import {route, response} from "plumier"\n\nclass AnimalController {\n    @route.get()\n    index(){\n        return response.redirect(<url>)\n    }\n}\n')),Object(i.b)("h4",{id:"custom-action-result"},"Custom Action Result"),Object(i.b)("p",null,"It is possible to extends the ability of ",Object(i.b)("inlineCode",{parentName:"p"},"ActionResult")," to modify the Http response to return custom http response. The main logic is on the ",Object(i.b)("inlineCode",{parentName:"p"},"execute")," method."),Object(i.b)("p",null,"For example the implementation of ",Object(i.b)("inlineCode",{parentName:"p"},"FileActionResult")," is quite simple as below"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'import send from "koa-send"\nimport { extname } from "path"\n\nexport class FileActionResult extends ActionResult {\n    constructor(path: string) {\n        super(path)\n    }\n\n    async execute(ctx: Context) {\n        await super.execute(ctx)\n        ctx.type = extname(this.body)\n        await send(ctx, this.body)\n    }\n}\n')),Object(i.b)("h2",{id:"throwing-errors"},"Throwing Errors"),Object(i.b)("p",null,"Any uncaught error will automatically handled by Plumier and translated into http response with status 500. You can throw ",Object(i.b)("inlineCode",{parentName:"p"},"HttpStatusError")," to provide custom error message with some http status that will be rendered into proper JSON response with appropriate status."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'import {route, response} from "plumier"\n\nclass AnimalController {\n    @route.get()\n    index(){\n        // other code \n        throw new HttpStatusError(400, "Please provide a good request")\n    }\n}\n')))}p.isMDXComponent=!0}}]);